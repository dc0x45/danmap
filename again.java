import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Scanner;

import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;

public class again extends javax.swing.JFrame {

    private static String activeUsername = "";
    private static String activePassword = "";
    private static boolean adminMode = false;
    private static final long serialVersionUID = 1L;

    public again() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    private String[] populateList() throws FileNotFoundException {
        File scansDir = new File("data/" + activeUsername + "/");
        File[] scansDirLs = scansDir.listFiles();
        String[] fakeStrings = new String[scansDirLs.length];

        for (int i = 0; i < scansDirLs.length; i++) {
            if (!scansDirLs[i].getName().contains("password")) {
                fakeStrings[i] = scansDirLs[i].getName();
            }
        }

        return fakeStrings;
    }

    @SuppressWarnings("unchecked")
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        rawOutput = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        brokenInfo = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        userScansList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        hostnameTextBox = new javax.swing.JTextField();
        scanButton = new javax.swing.JButton();
        scanTypeChoice = new javax.swing.JComboBox<>();

        jMenuItem1.setText("jMenuItem1");

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(700, 600));

        rawOutput.setEditable(false);
        rawOutput.setColumns(20);
        rawOutput.setRows(5);
        jScrollPane2.setViewportView(rawOutput);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup().addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 655, Short.MAX_VALUE)
                        .addContainerGap()));
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
                        jPanel1Layout.createSequentialGroup().addContainerGap()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                                .addContainerGap()));

        jTabbedPane1.addTab("Raw Output", jPanel1);

        brokenInfo.setEditable(false);
        brokenInfo.setColumns(20);
        brokenInfo.setRows(5);
        jScrollPane1.setViewportView(brokenInfo);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup().addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 655, Short.MAX_VALUE)
                        .addContainerGap()));
        jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
                        jPanel2Layout.createSequentialGroup().addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                                .addContainerGap()));

        jTabbedPane1.addTab("Broken Down Information", jPanel2);

        try {
            userScansList.setModel(new javax.swing.AbstractListModel<String>() {
                private static final long serialVersionUID = 1L;

                String[] strings = populateList();

                public int getSize() {
                    return strings.length;
                }

                public String getElementAt(int i) {
                    return strings[i];
                }
            });
        } catch (FileNotFoundException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }
        userScansList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    userScansListMouseClicked(evt);
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        });
        jScrollPane3.setViewportView(userScansList);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup().addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 655, Short.MAX_VALUE)
                        .addContainerGap()));
        jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
                        jPanel3Layout.createSequentialGroup().addContainerGap()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                                .addContainerGap()));

        jTabbedPane1.addTab("User Scans", jPanel3);

        jLabel1.setText("Scan Type:");

        jLabel2.setText("IP Address or Hostname(s) to scan:");

        hostnameTextBox.setText("scanme.nmap.org");
        hostnameTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostnameTextBoxActionPerformed(evt);
            }
        });

        scanButton.setText("Scan!");
        scanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanButtonActionPerformed(evt);
            }
        });

        if(adminMode){
            scanTypeChoice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {
                "Ping Sweep (to scan multiple IPs, use format: 127.0.0.1-256 or 127.0.0.1/24)", "Normal Mode (No Stealth)","Normal Mode (With Stealth)", 
                "No Ping (if you know the server is online for sure)", "Full Comprehensive Scan" }));
        } else {
        scanTypeChoice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {
                "Ping Sweep (to scan multiple IPs, use format: 127.0.0.1-256 or 127.0.0.1/24)", "Normal Mode",
                "No Ping (if you know the server is online for sure)", "Full Comprehensive Scan" }));
        }
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup().addContainerGap().addComponent(jTabbedPane1).addContainerGap())
                .addGroup(layout.createSequentialGroup().addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2).addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(hostnameTextBox, javax.swing.GroupLayout.DEFAULT_SIZE, 200,
                                        Short.MAX_VALUE)
                                .addComponent(scanTypeChoice, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(84, 84, 84)
                        .addComponent(scanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73,
                                javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
                .createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup().addContainerGap().addGroup(layout
                                .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel1)
                                .addComponent(scanTypeChoice, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup().addGap(28, 28, 28).addComponent(scanButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel2)
                        .addComponent(hostnameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52).addComponent(jTabbedPane1).addContainerGap()));

        pack();
    }// </editor-fold>

    private void hostnameTextBoxActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void userScansListMouseClicked(java.awt.event.MouseEvent evt) throws IOException {
        if(evt.getClickCount() >= 2){
            String selected = userScansList.getSelectedValue();
            byte[] toDecrypt = Files.readAllBytes(Paths.get("data/" + activeUsername + "/" + selected));

            byte[] cipherText = backend.AESer(toDecrypt, backend.encryptionString(activeUsername, activePassword), 1);
            String str = new String(cipherText, StandardCharsets.UTF_8);
            String sendToBrokenDown = backend.makeReadable(str);
            brokenInfo.setText(sendToBrokenDown);
            rawOutput.setText("Welcome " + activeUsername + "!\n\n" + str);

        }
    }                                          

    private void scanButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        String commandString = "";
        String dropdown = (String) scanTypeChoice.getSelectedItem();
        if(adminMode){
            switch(dropdown){
                case "Ping Sweep (to scan multiple IPs, use format: 127.0.0.1-256 or 127.0.0.1/24)":
                    commandString = " -sn --privileged ";
                    break;
                case "Normal Mode (No Stealth)":
                    commandString = " ";
                    break;
                case "Normal Mode (With Stealth)":
                    commandString = "-sS  ";
                    break;
                case "No Ping (if you know the server is online for sure)":
                    commandString = " -sS -Pn --top-ports --privileged ";
                    break;
                case "Full Comprehensive Scan":
                    commandString = " -sS -p- -sC -sS -A --privileged ";
                    break;
                default:
                    commandString = " --privileged ";
                    break;
            }
        } else {
            switch(dropdown){
                case "Ping Sweep (to scan multiple IPs, use format: 127.0.0.1-256 or 127.0.0.1/24)":
                    commandString = " -sn --unprivileged ";
                    break;
                case "Normal Mode":
                    commandString = " --unprivileged ";
                    break;
                case "No Ping (if you know the server is online for sure)":
                    commandString = " -Pn --top-ports --unprivileged ";
                    break;
                case "Full Comprehensive Scan":
                    commandString = " -p- -sC -A --unprivileged ";
                    break;
                default:
                    commandString = " ";
                    break;
            }
        }
        commandString += hostnameTextBox.getText();
        rawOutput.setText("Please wait, now scanning...");
        byte[] nmapBuffer = backend.runNmap(commandString);
        rawOutput.setText("Welcome " + activeUsername + "!\n\n" + new String(nmapBuffer, StandardCharsets.UTF_8));
        boolean done = backend.saveScanToFile(activeUsername, backend.AESer(nmapBuffer, backend.encryptionString(activeUsername, activePassword), 0));
        if (done){
            String brokenDownBuffer = backend.makeReadable(new String(nmapBuffer, StandardCharsets.UTF_8)); 
            brokenInfo.setText(brokenDownBuffer);

            try {
                userScansList.setModel(new javax.swing.AbstractListModel<String>() {
                    private static final long serialVersionUID = 1L;
    
                    String[] strings = populateList();
    
                    public int getSize() {
                        return strings.length;
                    }
    
                    public String getElementAt(int i) {
                        return strings[i];
                    }
                });
            } catch (FileNotFoundException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
        }
    }    
    
    // private boolean updateBrokenInfo()

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        if(args.length != 2){
            JOptionPane.showMessageDialog(null, "You wern't supposed to do that...");
            System.exit(1);
        }

        activeUsername = args[0];
        activePassword = args[1];

        if(backend.isAdminGroup(activeUsername)){
            adminMode = true;
        }

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(again.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(again.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(again.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(again.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new again().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JTextArea brokenInfo;
    private javax.swing.JTextField hostnameTextBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea rawOutput;
    private javax.swing.JButton scanButton;
    private javax.swing.JComboBox<String> scanTypeChoice;
    private javax.swing.JList<String> userScansList;
    // End of variables declaration                   
}